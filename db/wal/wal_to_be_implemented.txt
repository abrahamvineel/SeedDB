//implement wal

// Essential Features:
// Durability
// Atomicity
// Sequential Logging
// Crash Recovery
// Checkpointing
// Efficient Log Truncation
// Log Synchronization
// Concurrency and Thread Safety
// Optional (Advanced) Features:
// 9. Log Compaction
// 10. Fault Tolerance
// 11. Batching Writes
// 12. Versioning or Log Metadata
// 13. Support for Distributed Systems

// type LogRecord struct {
// 	LogSequenceNumber uint64
// 	TransactionId     uint64
// 	Operation         byte
// 	Key               []byte
// 	Value             []byte
// 	Timestamp         int64
// 	CRC               uint32
// }

// package wal

// import (
// 	"bufio"
// 	"errors"
// 	"fmt"
// 	"os"
// 	"strconv"
// 	"strings"
// 	"sync"

// 	"github.com/bwmarrin/snowflake"
// )

// type TransactionTableRecord struct {
// 	TransactionId uint64
// 	CheckpointLSN uint64
// 	Status        TTStatus
// }

// type TransactionTable struct {
// 	mu    sync.Mutex
// 	Table map[int]*TransactionTableRecord
// 	file  *os.File
// }

// type TTStatus byte

// const (
// 	BEGIN          TTStatus = 1
// 	COMMIT         TTStatus = 2
// 	CHECKPOINT     TTStatus = 3
// 	ROLLBACK       TTStatus = 4
// 	ABORT          TTStatus = 5
// 	INVALID_STATUS TTStatus = 4
// )

// func statusMapper(status uint8) (TTStatus, error) {
// 	if status == 1 {
// 		return BEGIN, nil
// 	} else if status == 2 {
// 		return COMMIT, nil
// 	} else if status == 3 {
// 		return CHECKPOINT, nil
// 	} else if status == 4 {
// 		return ROLLBACK, nil
// 	} else if status == 5 {
// 		return ABORT, nil
// 	}
// 	return INVALID_STATUS, errors.New("invalid status")
// }

// func (tt *TransactionTable) transactionTableInsert(cpRecord *CheckPointLogRecord) {

// 	tt.mu.Lock()
// 	defer tt.mu.Unlock()

// 	//1 is machine id
// 	node, err := snowflake.NewNode(1)
// 	if err != nil {
// 		return
// 	}

// 	// txnId := node.Generate()

// 	tt.Table[txnId] = &TransactionTableRecord{
// 		TransactionId: txnId,
// 		CheckpointLSN: cpRecord.CheckpointLSN,
// 		Status:        BEGIN,
// 	}

// 	record := fmt.Sprintf("%d|%d|%d\n", txnId, cpRecord.CheckpointLSN, BEGIN)

// 	tt.file.WriteString(record)
// 	tt.file.Sync()
// }

// func createTransactionTable(filename string) (*TransactionTable, error) {
// 	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)

// 	if err != nil {
// 		return nil, err
// 	}

// 	return &TransactionTable{
// 		Table: make(map[int]*TransactionTableRecord),
// 		file:  file,
// 	}, nil
// }

// func (tt *TransactionTable) loadTransactionTable() map[int]*TransactionTableRecord {
// 	tt.mu.Lock()
// 	defer tt.mu.Unlock()

// 	scanner := bufio.NewScanner(tt.file)

// 	for scanner.Scan() {
// 		parts := strings.Split(scanner.Text(), "|")
// 		txnId, _ := strconv.Atoi(parts[0])
// 		status, _ := strconv.ParseInt(parts[2], 10, 8)

// 		mappedStatus, _ := statusMapper(uint8(status))
// 		record := &TransactionTableRecord{
// 			TransactionId: uint64(txnId),
// 			Status:        mappedStatus,
// 		}
// 		tt.Table[txnId] = record
// 	}
// 	return tt.Table
// }

// func (tt *TransactionTable) commitTransactions() error {
// 	tt.mu.Lock()
// 	defer tt.mu.Unlock()

// 	var lastRecord TransactionTableRecord

// 	for txnId := range tt.Table {
// 		record := tt.Table[txnId]
// 		record.Status = COMMIT
// 		tt.Table[txnId] = record
// 		lastRecord = *record
// 	}

// 	err := tt.file.Truncate(0)
// 	if err != nil {
// 		return fmt.Errorf("Failed to truncate the file")
// 	}

// 	tt.file.Seek(0, 0)

// 	record := fmt.Sprintf("%d|%d|%d\n", lastRecord.TransactionId, lastRecord.CheckpointLSN, lastRecord.Status)
// 	tt.file.WriteString(record)

// 	return nil
// }
